import {
  Resolver,
  ID,
  Query,
  Mutation,
  Arg,
  UseMiddleware,
  Ctx,
} from 'type-graphql';

import { <%= name %> } from '@/entities/<%= name %>';

import { Auth } from '@/middleware/Auth';

import { getAll, getOne, create, update, destroy } from '@/utils/resolvers';

import { Context } from '@/types/Context';
import { Create<%= name %>Input } from './types/Create<%= name %>Input';
import { Update<%= name %>Input } from './types/Update<%= name %>Input';

@Resolver(() => <%= name %>)
export class <%= name %>Resolver {
  //////////////////////////////////////////////////////////////////////////////
  // Get all <%= name %> rows
  //////////////////////////////////////////////////////////////////////////////
  @Query(() => [<%= name %>])
  async <%= pluralName %>(): Promise<<%= name %>[]> {
    return getAll<<%= name %>>(<%= name %>);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Get <%= name %> by id
  //////////////////////////////////////////////////////////////////////////////
  @Query(() => <%= name %>)
  async <%= camelName %>(
    @Arg('id', () => ID) id: number,
    @Ctx() ctx: Context
  ): Promise<<%= name %>> {
    return getOne<<%= name %>>(<%= name %>, id, ctx, { isOwner: true });
  }

  //////////////////////////////////////////////////////////////////////////////
  // Create <%= name %>
  //////////////////////////////////////////////////////////////////////////////
  @UseMiddleware(Auth())
  @Mutation(() => <%= name %>)
  async create<%= name %>(
    @Arg('input') input: Create<%= name %>Input,
    @Ctx() ctx: Context
  ): Promise<<%= name %>> {
    return create<<%= name %>>(<%= name %>, input, ctx, { addOwner: true });
  }

  //////////////////////////////////////////////////////////////////////////////
  // Update <%= name %>
  //////////////////////////////////////////////////////////////////////////////
  @UseMiddleware(Auth())
  @Mutation(() => <%= name %>)
  async update<%= name %>(
    @Arg('id', () => ID) id: number,
    @Arg('input') input: Update<%= name %>Input,
    @Ctx() ctx: Context
  ): Promise<<%= name %>> {
    return update<<%= name %>>(<%= name %>, id, input, ctx, { isOwner: true });
  }

  //////////////////////////////////////////////////////////////////////////////
  // Delete <%= name %>
  //////////////////////////////////////////////////////////////////////////////
  @UseMiddleware(Auth())
  @Mutation(() => Boolean)
  async delete<%= name %>(
    @Arg('id', () => ID) id: number,
    @Ctx() ctx: Context
  ): Promise<Boolean> {
    return destroy(<%= name %>, id, ctx, { isOwner: true });
  }
}
